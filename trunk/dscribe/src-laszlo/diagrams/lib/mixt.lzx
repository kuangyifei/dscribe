<library>
<include href="../../lzosutils/lib"/>
<include href="../../baseutils/lib"/>
<include href="../../xpath/lib"/>
<script src="md5.js"/>

<class name = 'block' extends = 'node'>
	<attribute name = 'text' type = 'text'/>
	<attribute name = 'query' type = 'expression'/>
	<attribute name = 'delegate' value = '$once{new LzDelegate(this, "handleChange")}' type = 'expression'/>
	<attribute name = 'mayHaveChanged' value = 'false' type = 'boolean'/>
	<attribute name = 'followingMayHaveChanged' value = 'false' type = 'boolean'/>
	<attribute name = 'mayBeChanging' value = 'false' type = 'boolean'/>
	
	<handler name = 'oninit'><![CDATA[
		setAttribute('text', this.text.replace('&apos;', "'").replace('&quot;', '"').replace('&gt;', '>').replace('&lt;', '<').replace('&amp;', '&'));
		this.setAttribute('query', XPath.parse(this.text));
		if (this.query) this.setAttribute('text', null);
	]]></handler>
	
	<method name = 'analyze' args = 'env'>
		if (this.query) {
			var analysis = XPath.analyze(this.query, env);
			console.log("Dependencies for " + query.queryText + ":");
			if (analysis.bounded) {
				console.log("   " + analysis.referencedNodeNames);
				analysis.referencedNodeNames.forEach(function(name) {
					this.callAncestor('listenNodeChanged', delegate, name);}, this);
			} else {
				console.log("   *");
				// listen for any node changed
				this.callAncestor('listenNodeChanged', delegate, '*');
			}
		}
	</method>
	
	<method name = 'handleChange' args = 'unused'>
		setAttribute('mayBeChanging', true);
	</method>
	
	<method name = 'prepareForCycle' args = 'followingMayHaveChanged'>
		setAttribute('mayHaveChanged', this.mayBeChanging);
		setAttribute('followingMayHaveChanged', followingMayHaveChanged);
		setAttribute('mayBeChanging', false);
	</method>
	
	<method name = 'runQuery' args = 'env'>
		return canvas.query(this.query, env);
	</method>
	
	<method name = 'bind' args = 'mod, env'>
		env.pushVar();
	</method>
</class>

<class name = 'mixt_for' extends = 'block'>
	<attribute name = 'each' type = 'string'/>
	<attribute name = 'all' type = 'string'/>
	<method name = 'recompute' args = 'baseMod, env'>
		if ('each' in this) recomputeEach(baseMod, env); else recomputeAll(baseMod, env);
	</method>
	<method name = 'recomputeEach' args = 'baseMod, env'>
		var newRefs = {};
		this.runQuery(env).forEach(function(node) {
			if ('xml_id' in node) {
				newRefs[node.xml_id] = node;
			} else {
				console.error('node selected by for block has no xml_id: ' + node);
			}
		});
		if (baseMod.subnodes) {
			var oldMods = baseMod.subnodes.slice();
			oldMods.forEach(function(oldMod) {
				var oldRefId = oldMod.references[0].xml_id;
				if (newRefs[oldRefId]) {
					delete newRefs[oldRefId];
				} else {
					oldMod.destroy();
				}
			});
		}
		for (var key in newRefs) {
			new lz.mod_mod(baseMod, {references: [newRefs[key]], key: key});
		}
	</method>
	<method name = 'recomputeAll' args = 'baseMod, env'><![CDATA[
		var newRefs = this.runQuery(env);
		newRefs.sort(function(a, b) {return a.xml_id == b.xml_id ? 0 : a.xml_id < b.xml_id ? -1 : 1;});
		if (baseMod.subnodes && baseMod.subNodes.length) {
			if (newRefs.equals(baseMod.subnodes[0].references)) return;
			baseMod.subnodes[0].destroy();
		}
		new lz.mod_mod(baseMod, {references: newRefs});
	]]></method>
	<method name = 'bind' args = 'mod, env'>
		env.pushVar('each' in this ? this.each : this.all, mod.references);
	</method>
</class>

<class name = 'mixt_with' extends = 'block'>
	<attribute name = 'some' type = 'string'/>
	<attribute name = 'any' type = 'string'/>
	<attribute name = 'distinct' type = 'string'/>
	<handler name = 'oninit'>
		this.varName = 'some' in this ? this.some : ('any' in this ? this.any : this.distinct);
	</handler>
	<method name = 'recompute' args = 'baseMod, env'>
		if ('distinct' in this) recomputeDistinct(baseMod, env); else recomputeBlind(baseMod, env);
	</method>
	<method name = 'recomputeBlind' args = 'baseMod, env'><![CDATA[
		var values = this.runQuery(env);
		if (baseMod.subnodes && baseMod.subnodes.length) {
			if (values.equals(baseMod.subnodes[0].values)) return;
			baseMod.subnodes[0].destroy();
		}
		if (this.some && !values.length) return;
		new lz.mod_mod(baseMod, {values: values});
	]]></method>
	<method name = 'recomputeDistinct' args = 'baseMod, env'><![CDATA[
	    var values = {};
		this.runQuery(env).forEach(function(val) {values[val.atomized()] = true;});
		if (baseMod.subnodes) {
			var oldMods = baseMod.subnodes.slice();
			oldMods.forEach(function(oldMod) {
				var oldValue = oldMod.values[0];
				if (values[oldValue]) {
					delete values[oldValue];
				} else {
					oldMod.destroy();
				}
			});
		}
		for (var key in values) new lz.mod_mod(baseMod, {values: [key], key: sanitizeKey(key)});
	]]></method>
	<method name = 'sanitizeKey' args = 'key'><![CDATA[
		var encodedChars = [];
		key = String(key);
		for (var i = 0; i < key.length; i++) {
			var code = key.charCodeAt(i);
			if (code >= 0x61 && code <= 0x7a || code >= 0x41 && code <= 0x5a || code >= 0x30 && code <= 0x39) {
				// letters and digits are OK
				var c = key.charAt(i);
			} else if (code == 0x2d) {	// dash
				var c = '--';
			} else {
				var c = '-' + code.toString(16) + '-';
			}
			encodedChars.push(c);
		}
		return encodedChars.join('');
	]]></method>
	<method name = 'bind' args = 'mod, env'>
		env.pushVar(this.varName, mod.values);
	</method>
</class>

<class name = 'mixt_insert' extends = 'block'>
	<method name = 'recompute' args = 'baseMod, env'><![CDATA[
		var elements = this.runQuery(env);
		var checksum = b64_md5(elements.serialized());
		if (baseMod.subnodes && baseMod.subnodes.length > 0) {
			var oldMod = baseMod.subnodes[0];
			if (oldMod.checksum && checksum == oldMod.checksum) return;
			oldMod.destroy();
		}
		if (!env.vars.target) {
			console.error(this + ' has no target');
			return;
		}
		if (env.vars.target.length > 1) {
			console.error(this + ' has multiple targets: ' + env.vars.target);
			return;
		}
		var insertedElements = env.vars.target[0].insertCopy(elements);
		var newMod = new lz.mod_mod(baseMod, {affected: insertedElements, checksum: checksum});
		elements.forEach(function(element) {element.listenForChanges(baseMod.delegate);});
		var serial = insertedElements.length > 1 ? 1 : -1;
		insertedElements.forEach(function(element) {
			element.setXmlAttribute(
					'xml_id',
					newMod.findAncestorProperty('xml_id') + newMod.stage + (serial >= 0 ? '-' + serial : '') + '.');
			serial++;
			if ('refresh' in element) element.refresh();
		});
	]]></method>
	<method name = 'bind' args = 'mod, env'>
		env.pushVar('nodeTarget', mod.affected);
	</method>
</class>

<class name = 'mixt_rule' extends = 'node'>
	<attribute name = 'desc' type = 'string'/>
	<attribute name = 'xml_id' type = 'string'/>
	<attribute name = 'description' type = 'string'/>

	<method name = 'prepareForCycle'>
		var changed = false;
		this.forEachReversedBlock(function(block) {
			block.prepareForCycle(changed);
			changed |= block.mayHaveChanged;
		});
	</method>
		
	<method name = 'forEachReversedBlock' args = 'fn'>
		var reversedBlocks = this.subnodes.slice();
		reversedBlocks.reverse();
		reversedBlocks.forEach(fn);
	</method>
</class>

<class name = 'mixt_function' extends = 'node'>
	<attribute name = 'name' type = 'token'/>
	<attribute name = 'args' type = 'string'/>
	<attribute name = 'text' type = 'text'/>
	<attribute name = 'query' type = 'expression'/>
	<attribute name = 'arglist' type = 'expression'/>
	<handler name = 'oninit'><![CDATA[
		this.setAttribute('text', this.text.replace('&apos;', "'", 'g').replace('&quot;', '"', 'g'));
		this.setAttribute('query', XPath.parse(this.text));
		this.arglist = this.args ? this.args.split(',') : [];
		for (var i = 0; i < this.arglist.length; i++) this.arglist[i] = this.arglist[i].strip();
		var self = this;
		parent.functions['local:' + this.name] = {
			args: this.arglist.map(function() {return XPath.ArgumentConstraints.item.sequence();}),
			fn: function(context) {
				var fnargs = arguments.slice(1);
				for (var i = 0; i < self.arglist.length; i++) {
					context.env.pushVar(self.arglist[i], fnargs[i]);
				}
				var r = self.query.eval(context);
				for (var i = 0; i < self.arglist.length; i++) context.env.popVar();
				return r;
			}
		};
	]]></handler>
</class>

<class name = 'mixt_rules' extends = 'node'>
	<attribute name = 'map' value = '{}' type = 'expression'/>
	<attribute name = 'functions' value = '{}' type = 'expression'/>
	<handler name = 'oninit'>
		this.subnodes.forEach(function(rule) {if ('xml_id' in rule) map[rule.xml_id] = rule;});
	</handler>
	<method name = 'analyze' args = 'env'>
		this.subnodes.forEach(function(rule) {
			if (rule.subnodes) {
				rule.subnodes.forEach(function(block) {
					block.analyze(env);
				});
			}
		});
	</method>
	<method name = 'trackXmlId' args = 'node, value'/>
</class>

<class name = 'mod_mod' extends = 'node'>
	<attribute name = 'xml_id' type = 'string'/>
	<attribute name = 'stage' type = 'number'/>
	<attribute name = 'rule' type = 'string'/>
	<attribute name = 'key' type = 'string'/>
	<attribute name = 'references' type = 'expression'/>
	<attribute name = 'affected' type = 'expression'/>
	<attribute name = 'values' type = 'expression'/>
	<attribute name = 'checksum' type = 'string'/>
	<attribute name = 'mayHaveChanged' value = 'true' type = 'boolean'/>
	<attribute name = 'descendantsMayHaveChanged' value = 'false' type = 'boolean'/>
	<attribute name = 'delegate' value = '$once{new LzDelegate(this, "handleChange")}' type = 'expression'/>
	
	<handler name = 'oninit'><![CDATA[
		if (!('rule' in this) && parent.rule) this.setXmlAttribute('rule', parent.rule);
		if (!('stage' in this)) this.setXmlAttribute('stage', parent.stage+1);
		if (!('xml_id' in this) && 'key' in this) this.setXmlAttribute('xml_id', this.findAncestorProperty('xml_id') + this.key + '.');
		this.parent.childChanged();
	]]></handler>
	
	<handler name = 'ondestroy'>
		if (this['affected']) this.affected.forEach(function(node) {
			node.destroy();
		});
	</handler>
	
	<method name = 'childChanged'>
		if (!this.descendantsMayHaveChanged) {
			this.setAttribute('descendantsMayHaveChanged', true);
			this.parent.childChanged();
		}
	</method>
	
	<method name = 'handleChange' args = 'unused'>
		this.setAttribute('mayHaveChanged', true);
	</method>

	<method name = 'traverse' args = 'fn'>
		fn(this);
		if (this.subnodes) this.subnodes.forEach(function(child) {child.traverse(fn);});
	</method>
	
	<method name = 'recompute' args = 'env'><![CDATA[
	    if (this.rule.subnodes.length <= this.stage + 1) return;
		var nextBlock = this.rule.subnodes[this.stage + 1];
		
		if (!(nextBlock.mayHaveChanged || nextBlock.followingMayHaveChanged ||
				this.mayHaveChanged || this.descendantsMayHaveChanged)) return;
		
		if (this.stage >= 0) this.rule.subnodes[this.stage].bind(this, env);
		if (this.mayHaveChanged || nextBlock.mayHaveChanged) {
			nextBlock.recompute(this, env);
			this.setAttribute('mayHaveChanged', false);
		}
		if (this.subnodes && (this.descendantsMayHaveChanged || nextBlock.followingMayHaveChanged)) {
			this.subnodes.forEach(function(child) {child.recompute(env);});
		}
		this.setAttribute('descendantsMayHaveChanged', false);
		if (this.stage >= 0) env.popVar();
	]]></method>
</class>

<class name = 'mod_mods' extends = 'mod_mod'>
	<attribute name = 'stage' value = '-1' type = 'number'/>
	<method name = 'recompute' args = 'env'>
		this.rule.prepareForCycle();
		super.recompute(env);
	</method>
</class>

<class name = 'mod_modstore' extends = 'node'>
	<method name = 'connectRules' args = 'ruleMap'>
		if (!this.subnodes) return;
		this.subnodes.forEach(function(rootmod) {
			var rule = ruleMap[rootmod.rule];
			rootmod.traverse(function(mod) {
				mod.setAttribute('rule', rule);
			});
		});
	</method>
	<method name = 'recompute' args = 'env'>
		if (!this.subnodes) return;
		this.subnodes.forEach(function(rootmod) {
			rootmod.recompute(env);
		});
	</method>
	<method name = 'childChanged'/>
</class>

<class name = 'MixtEngine' extends = 'node'>
	<attribute name = 'xmlContainer' type = 'expression'/>
	<attribute name = 'env' type = 'expression'/>
	<attribute name = 'rules' type = 'expression'/>
	<attribute name = 'modstore' type = 'expression'/>
	<attribute name = 'changesMade' value = 'false' type = 'boolean'/>

	<handler name = 'oninit'><![CDATA[
		var self = this;
		this.xmlContainer.subnodes.forEach(function(child) {
			if (child.constructor.tagname == 'mixt_rules') self.rules = child;
			if (child.constructor.tagname == 'mod_modstore') self.modstore = child;
		});
		if (!(this.rules && this.modstore)) {
			console.error("missing required rules engine subnode: rules=" + this.rules + ", modstore=" + this.modstore);
			return;
		}
		this.modstore.connectRules(this.rules.map);
		this.env = new XPath.Environment(this.xmlContainer.subnodes);
		this.env.varsStack = [];
		this.env.functions = this.rules.functions;
		this.rules.analyze(env);
	]]></handler>
	<handler reference = 'xmlContainer' name = 'onanynodechanged'>
		this.setAttribute('changesMade', true);
	</handler>
	<method name = 'recompute'>
		var t1 = new Date().getTime();
		var iter = 0;
		do {
			if (++iter > 10) {
				console.error('MIXT engine running for 10 iterations, aborting');
				return;
			}
			console.log('--- MIXT iteration ' + iter);
			this.setAttribute('changesMade', false);
			modstore.recompute(this.env);
		} while (this.changesMade);
		var t2 = new Date().getTime();
		console.log((t2 - t1) + "ms for MIXT run, " + iter + " iterations");
	</method>
</class>

</library>
