<library>

<include href="lzosutils/lib"/>
<include href="common-views.lzx"/>
<include href="diagram-editor.lzx"/>
<include href="magic-sentence.lzx"/>
<include href="xpath.lzx"/>

<stylesheet>

umlclass {
	padding: 2;
	color: #888;
}

umldiagram {
	idletextcolor: #444;
	hovertextcolor: #000;
}

</stylesheet>

<resource name = 'iconDelete' src = 'icons/delete_obj.gif'/>

<class name = 'umldiagram' showhandcursor = 'false' width = '${immediateparent.width}' height = '${immediateparent.height}'>
	<attribute name = 'defaultplacement' value = 'contents' type = 'string'/>
	<attribute name = 'title' type = 'string'/>
	<attribute name = 'xmlid' type = 'string'/>
	<attribute name = 'idTable' type = 'expression'/>
	
	<view name = 'contents' width = '${parent.width}' height = '${parent.height}'/>

	<handler name = 'onclick'> findAncestor("select").select(null); </handler>
	<method name = 'gatherPossibleActions' args = 'box, targets'>
		box.setTitle("Diagram");
		box.addLink({icon: 'iconDelete', text: "Do something", action: function() {dump(this);}});
	</method>
	<method name = 'trackXmlId' args = 'node, value'>
		if (!this.idTable) this.idTable = {};
		this.idTable[value] = node;
	</method>
	<method name = 'getByXmlId' args = 'value'>
		var node = this.idTable[value];
		if (!node || node.xmlid != value) return;
		return node;
	</method>
</class>

<class name = 'umlclass'
		onmousedown = 'dragger.apply()'
		onmouseup = 'dragger.remove()'>
	<attribute name = 'defaultplacement' value = 'contents' type = 'string'/>
	<attribute name = 'padding' value = '$style{"padding"}' type = 'size'/>
	<attribute name = 'color' value = '$style{"color"}' type = 'color'/>
	<attribute name = 'xmlid' type = 'string'/>
	<handler name = 'onclick'> findAncestor("select").select(this); </handler>

	<dragstate name = 'dragger'
		drag_min_x = '0'
		drag_max_x = '${immediateparent.mask.getAttributeRelative("width", immediateparent) - width}'
		drag_min_y = '0'
		drag_max_y = '${immediateparent.mask.getAttributeRelative("height", immediateparent) - height}'>
		<handler name = 'onapply'>
			if (!findAncestorProperty("editMode")) this.remove();
		</handler>
	</dragstate>
	
	<resizestatelimits name = 'resizer'
		minwidth = '50'
		maxwidth = '${immediateparent.mask.getAttributeRelative("width", immediateparent) - x}'
		minheight = '$once{19 + 2*padding}'
		maxheight = '${inside.contents.height + 2*(padding + 1)}'>
		<handler name = 'onapply'>
			if (!findAncestorProperty("editMode")) this.remove();
		</handler>
	</resizestatelimits>
	
	<rect width = '${parent.width}' height = '${parent.height}'
		fillAlpha = '0.7' fillColor = 'white'
		strokeAlpha = '1.0' strokeColor = '${parent.color}'/>
    
	<view name = 'inside' x = '1' y = '1' width = '${parent.width-2}' height = '${parent.height-2}' clip = 'true'>
		<vbox name = 'contents'
			x = '${classroot.padding}' y = '${classroot.padding}'
			width = '${parent.width - 2*classroot.padding}'/>
		<faderect visible = '${parent.contents.height + 2*classroot.padding > parent.height}'
			target = '$once{parent.contents}'
			side = 'bottom'/>
	</view>

	<sizecorner resizer = '$once{parent.resizer}' visible = '${findAncestor("editMode").editMode}'/>
	
	<method name = 'init'><![CDATA[
		super.init();
		var minheight = 19 + 2*padding;
		var fullheight = inside.contents.height + 2*(padding + 1);
		if (height < minheight) setAttribute("height", fullheight);
    ]]></method>
</class>

<class name = 'umlblockname'>
	<attribute name = 'text' type = 'text'/>
	<attribute name = 'xmlid' type = 'string'/>
	<rollovertext name = 'contents'
		x = '${Math.max(0, (classroot.immediateparent.width - width)/2)}'
		y = '1'
		fontsize = '12'
		text = '${parent.text}'
		overflow = '${classroot.immediateparent.width &lt; width}'/>
	<faderect visible = '${parent.contents.x == 0}'
		target = '$once{parent.contents}'
		side = 'right'/>
</class>

<class name = 'umlcompartment'>
	<attribute name = 'kind' type = 'string'/>
	<attribute name = 'defaultplacement' value = 'contents' type = 'string'/>
	<attribute name = 'xmlid' type = 'string'/>
	<hrule name = 'separator'/>
	<vbox name = 'contents' y = '${parent.separator.height}' width = '${classroot.immediateparent.width}'/>
	<faderect target = '$once{parent.contents}' side = 'right'/>
</class>

<class name = 'umlmember'
		width = '${immediateparent.width}' clip = 'true' opacity = '0.5'>
	<attribute name = 'defaultplacement' value = 'contents' type = 'string'/>
	<attribute name = 'value' type = 'string'/>
	<attribute name = 'xmlid' type = 'string'/>
	
	<method name = 'findSetHeightContainer'><![CDATA[
		return parent.findFormalAncestorSuchThat(function() {
				return this.hassetheight && !(this instanceof umldiagram);});
	]]></method>
	
	<method name = 'animateShow'>
		setHeight(0);
		show();
		animate("height", measureHeight(), 150, false, {motion: "linear"});
		var container = findSetHeightContainer();
		if (container) container.animate("height", measureHeight(), 150, true, {motion: "linear"});
	</method>
	<method name = 'animateHide'>
		findAncestor("deselect").deselect(this);
		var animator = animate("height", 0, 150, false, {motion: "linear"});
		new LzDelegate({execute: function(_) {hide();}}, "execute", animator, "onstop");
		var container = findSetHeightContainer();
		if (container) container.animate("height", -height, 150, true, {motion: "linear"});
	</method>
	
	<handler name = 'onmousedown'> callAncestorProperty("dragger", function() {this.apply()}); </handler>
	<handler name = 'onmouseup'> callAncestorProperty("dragger", function() {this.remove()}); </handler>
	<handler name = 'onclick'> findAncestor("select").select(this); </handler>
	<handler name = 'onvalue'>
		displayText.setText(value);
		displayText.setAttribute("overflow", displayText.width > width);
	</handler>
	<handler name = 'onwidth'>
		displayText.setAttribute("overflow", displayText.width > width);
	</handler>

	<rollovertext name = 'displayText' opacity = '${classroot.opacity}'/>
	<node name = 'contents'/>
</class>
 
<class name = 'umlattribute' extends = 'umlmember' value = '${contents.subnodes[0].seg}'>
	<method name = 'gatherPossibleActions' args = 'actionBox, targets'>
		if (targets.length != 1) return;
		var target = targets[0];
		actionBox.setTitle("Attribute");
		actionBox.addLink({icon: "iconDelete", text: "Delete", actionCreator: function() {
			var action = new MagicSentenceAction();
			action.addChoice(
					"targetSelector",
					"attribute " + target.name, "/id('$1')".fill(target.xmlid),
					"attributes named " + target.name, "//uml:attribute[name='$1']".fill(target.name),
					"all attributes of type " + target.type, "//uml:attribute[type='$1']".fill(target.type));
			action.addChoice(
					"location",
					"class " + target.umlclass.name, "[ancestor::uml:class/name='$1']".fill(target.umlclass.name),
					"all classes", "");
			action.addChoice(
					"scope",
					"this diagram", "/id('$1')".fill(target.umlclass.diagram.xmlid),
					"all diagrams", "");
			action.addSentence({targetSelector: 0}, "Delete ${targetSelector} in ${scope}.");
			action.addSentence({}, "Delete ${targetSelector} from ${location} in ${scope}.");
			action.apply = function() {animateHide();};
			action.unapply = function() {animateShow();};
			return action;
		}});
	</method>
</class>

<class name = 'umloperation' extends = 'umlmember'
	value = '${contents.subnodes[0].seg + contents.subnodes[1].seg + (contents.subnodes[2].visible ? " : " : "") + contents.subnodes[2].seg}'/>

<class name = 'textseg' extends = 'node'>
	<attribute name = 'text' value = '' type = 'text'/>
	<attribute name = 'visible' value = 'true' type = 'boolean'/>
	<attribute name = 'seg' value = '${visible ? text : ""}' type = 'string'/>
</class>

<class name = 'umlvar' extends = 'textseg'
	text = '${subnodes[0].seg + (subnodes[0].visible &amp;&amp; subnodes[1].visible ? " : " : "") + subnodes[1].seg}'/>

<class name = 'umlname' extends = 'textseg'/>
<class name = 'umltype' extends = 'textseg'/>

<class name = 'umlargs' extends = 'textseg'>
	<attribute name = 'elide' value = 'false' type = 'boolean'/>
	<attribute name = 'concatDelegate'/>
	<handler name = 'onelide' method = 'concat'/>
	<method name = 'init'>
		super.init();
		this.concatDelegate = new LzDelegate(this, "concat");
		subnodes.forEach(function(node) {
			concatDelegate.register(node, "onvisible");
			concatDelegate.register(node, "onseg");
		});
		concat();
	</method>
	<method name="destroy">
		concatDelegate.unregisterAll();
		super.destroy();
	</method>
	<method name = 'concat' args = '_'>
		var s = "(";
		if (elide) {
			if (subnodes) s += "...";
		} else {
			var first = true;
			subnodes.forEach(function(node) {
				if (node.visible) {
					if (!first) s += ", ";
					s += node.seg;
					first = false;
				}
			});
		}
		s += ")";
		setAttribute("text", s);
	</method>
</class>

</library>
