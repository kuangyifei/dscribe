<library>

<include href="lzosutils/lib"/>
<include href="baseutils/lib"/>

<stylesheet>

Viewer {
	barcolor: #d0d0d5;
	barwidth: 200;
	margin: 8;
	titlebgcolor: #eee;
/* Meant for uml_class */
	padding: 2;
	color: #888;
/* Meant for uml_diagram */
	idletextcolor: #444;
	hovertextcolor: #000;
}

</stylesheet>

<class name = 'XmlContainer' width = '${parent.width}' height = '${parent.height}'>
	<attribute name = 'idTable' value = '{}' type = 'expression'/>
	<event name = 'onanynodechanged'/>
	
	<method name = 'trackXmlId' args = 'element, oldValue, newValue'><![CDATA[
		if (oldValue && this.idTable[oldValue] == element) delete idTable[oldValue];
		if (newValue) idTable[newValue] = element;
	]]></method>
		
	<method name = 'getByXmlId' args = 'value'>
		var node = this.idTable[value];
		if (!node || node.xml_id != value) return;
		return node;
	</method>
	
	<method name = 'fireNodeChanged' args = 'nodeName'>
		var ev = this['onnodechanged_' + nodeName];
		if (ev) ev.sendEvent(nodeName);
		this.onanynodechanged.sendEvent(nodeName);
	</method>
	
	<method name = 'listenNodeChanged' args = 'delegate, nodeName'>
		if (this[nodeName]) new LzEvent(this, 'onnodechanged_' + nodeName);
		delegate.register(this, 'onnodechanged_' + nodeName);
	</method>
</class>


<class name = 'EditTab'>
<attribute name = 'dragger' type = 'expression'/>
<attribute name = 'hovering' value = 'false' type = 'boolean'/>
<attribute name = 'dragging' value = 'false' type = 'boolean'/>
<attribute name = 'fillColor' type = 'color'/>

<drawview name = 'editTabShape'
		width = '${parent.editTabText.x + parent.editTabText.width + 8}'
		height = '${parent.editTabText.y + parent.editTabText.height + 2}'>
	<handler name = 'oncontext' method = 'redraw'/>
	<handler name = 'onheight' method = 'redraw'/>
	<handler name = 'onwidth' method = 'redraw'/>
	<method name = 'redraw' args = '_'>
		if (!context) return;
		clear();
		beginPath();
		moveTo(0, 0);
		lineTo(0, height);
		lineTo(parent.editTabText.x + parent.editTabText.width, height);
		quadraticCurveTo(width - 3, height, width, 0);
		closePath();
		this.fillStyle = classroot.fillColor;
		this.strokeStyle = this.fillStyle;
		stroke();
		fill();
	</method>
</drawview>

<text name = 'editTabText' text = 'Edit' x = '2' y = '2'>
	<handler name = 'onhovering' reference = 'parent' method = 'changeColor'/>
	<handler name = 'ondragging' reference = 'parent' method = 'changeColor'/>
	<method name = 'changeColor' args = '_'>
		var newColor = parent.dragging || parent.hovering ? 0xffffff : 0x000000;
		if (fgcolor != newColor) setColor(newColor);
	</method>
</text>

<handler name = 'onmouseover'> setAttribute("hovering", true); </handler>
<handler name = 'onmouseout'> setAttribute("hovering", false); </handler>
<handler name = 'onmousedown'> setAttribute("dragging", true); dragger.apply(); </handler>
<handler name = 'onmouseup'> setAttribute("dragging", false); dragger.remove(); </handler>
</class>


<class name = 'Viewer' clip = 'true'>
	<attribute name = 'defaultplacement' value = 'custom_method' type = 'string'/>
	<attribute name = 'padding' value = '$style{"margin"}' type = 'number'/>
	<attribute name = 'diagram' value = '${main.contents.subviews[0]}' type = 'expression'/>
	
	<view name = 'main'
			x = '${("sidebar" in parent ? parent.sidebar.x + parent.sidebar.width : 0) + 2}'
			width = '${parent.width - x}'
			height = '${parent.height}'>
		<rect name = 'border'
			fgcolor = '$style{"titlebgcolor"}'
			width = '${parent.width}' height = '${parent.height}'/>
		<view name = 'titlebar' width = '${parent.width}'>
			<attribute name = 'reservedWidth' value = '${editTab.visible ? editTab.x + editTab.width + 8 : 0}' type = 'number'/>
			<rect
				width = '${parent.width}' height = '${parent.titleText.height + 6}'
				fillColor = '$style{"titlebgcolor"}' strokeColor = '$style{"titlebgcolor"}'/>
			<EditTab name = 'editTab' visible = 'false' fillColor = '$style{"barcolor"}' x = '-2'/>
			<text name = 'titleText' text = '${"&lt;p align=&apos;center&apos;&gt;" + classroot.diagram.title + "&lt;/p&gt;"}'
				x = '${parent.reservedWidth}' y = '2'
				width = '${parent.width - 2*parent.reservedWidth}'
				multiline = 'true'
				fontsize = '16'/>
		</view>
		<XmlContainer name = 'contents' clip = 'true'
				x = '2' y = '${parent.titlebar.y + parent.titlebar.height + 2}'
				width = '${parent.width - 4}' height = '${parent.height - 4}'/>
	</view>
	
	<method name = 'determinePlacement' args = 'child, placement, args'>
		if (!child) return this;
		if (child.constructor.tagname.startsWith('uml_')
				|| child.constructor.tagname.startsWith('mixt_')
				|| child.constructor.tagname.startsWith('mod_')) {
			return this.main.contents;
		} else {
			return this;
		}
	</method>
	
</class>



</library>
