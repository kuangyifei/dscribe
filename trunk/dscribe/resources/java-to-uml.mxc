namespace	java	http://ideanest.com/dscribe/ns/java
namespace	uml	http://ideanest.com/dscribe/ns/uml
namespace map	http://ideanest.com/dscribe/ns/map

rule create diagram
	for each $mapping:	//map:create-diagram
	create-doc:				diagrams/{$mapping/@id}.xml
	insert:					<uml:diagram id='{$mapping/@id}'/>

rule copy class to diagram
	for each $map:		//map:class-to-diagram
	for one $jclass:		/id($map/@class)/self::java:class
	for one target:		//uml:diagram[@id=$map/@diagram]
	insert:
		<uml:class depicts='{$jclass/@xml:id}'/>

rule create class compartments
	for each target:		//uml:class
	insert in order:
		(<uml:compartment kind='attribute'/>,
		 <uml:compartment kind='operation'/>)
	sort after sibling:		* except uml:compartment

rule copy name to depiction
	for each $source:		//java:*[@name]
	for each target:		//uml:*[@depicts=$source/@xml:id]
	insert:					<uml:name>{$source/@name/string()}</uml:name>

rule copy fields to attributes
	for each $source:		//java:field
	for one target:		//uml:class[@depicts=$source/../@xml:id]/uml:compartment[@kind='attribute']
	insert:					<uml:attribute depicts='{$source/@xml:id}'/>
	sort as corresponding:	$source

rule copy fields to attributes
	for each $source:		//java:method | //java:constructor
	for one target:		//uml:class[@depicts=$source/../@xml:id]/uml:compartment[@kind='operation']
	insert:					<uml:operation depicts='{$source/@xml:id}'/>
	sort as corresponding:	$source
