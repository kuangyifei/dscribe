namespace uml http://ideanest.com/dscribe/ns/uml
namespace a http://ideanest.com/dscribe/ns/actions
namespace effect http://ideanest.com/dscribe/ns/effects

function scope($action):
	if ($action/@scope='diagram') then /id($action/@diagram) else /uml:diagram

function specificity($action):
	(if ($action/@targetSelector = 'by-id') then 2
		else if ($action/@location != 'any') then 1 else 0) +
	(if ($action/@scope = 'diagram') then 1 else 0)

function actionProperties($action):
	(
		attribute action {$action/@xml:id},
		attribute specificity {local:specificity($action)},
		attribute serial {$action/@serial},
		attribute override {$action/@override}
	)

function muton($action, $target, $effect, $desired):
	element a:muton {
		attribute diagram {$target/root()/uml:diagram/@xml:id},
		attribute target {$target/@xml:id},
		attribute effect {$effect},
		attribute key {string-join(($target/@xml:id, $effect), '-')},
		attribute desired {$desired},
		local:actionProperties($action)
	}


rule deconflict candidate actions
	for all $candidates:		/a:candidates
	with some $c0:			$candidates/a:muton
	with distinct $key:		$c0/@key
	with some $c1:			$c0[@key = $key]
	with some $minserial:	max((0, $c1[@override='true']/@serial))
	with some $c2:			$c1[@serial >= $minserial]
	with some $minspecificity: max((0, $c2/@specificity))
	with some $c3:			$c2[@specificity >= $minspecificity]
	with some $highserial:	max($c3/@serial)
	for each target:			/a:triggers[@kind = 'derived']
	insert:						$c3[@serial = $highserial]

rule apply mutons
	for each $muton: /a:triggers/a:muton
	for each target: /id($muton/@target)
	insert: element {string-join(('effect', $muton/@effect), ':')} {$muton/@desired}


rule apply delete-attribute actions
	for each $action:	/a:triggers/a:delete-attribute[@enabled='true']
	for each $attribute:
		local:scope($action)/
		(if ($action/@targetSelector='by-id') then id($action/@selection)
			else if ($action/@targetSelector='by-elemName') then descendant::uml:attribute[uml:var/uml:name=$action/@elemName]
			else if ($action/@targetSelector='by-elemType') then descendant::uml:attribute[uml:var/uml:type=$action/@elemType]
			else ())/ 
		(if ($action/@location='in-className') then .[ancestor::uml:class/uml:blockname=$action/@className] else .)
	for each target:	/a:candidates[@kind = 'derived']
	insert:	local:muton($action, $attribute, 'visibility', 'false')
