<library>

<include href="../../lzosutils/lib"/>
<include href="../../baseutils/lib"/>

<script><![CDATA[
var XPath = {Grammar: {}, Semantics: {}, Functions: {}};

XPath.Environment = function(roots) {
	if (!roots) roots = [canvas];
	this.roots = roots;
	this.docs = roots.map(function(root) {return new XPath.Semantics.DocumentNode(root);});
	this.vars = {};
	this.functions = {};
	this.pushedVars = [];
};
XPath.Environment.prototype.setup = function() {
	var env = this;
	this.roots.forEach(function(root, index) {
		root.xparent = function() {return env.docs[index];};
	});
};
XPath.Environment.prototype.teardown = function() {
	this.roots.forEach(function(root) {delete root.xparent;});
};
XPath.Environment.prototype.pushVar = function(key, value) {
	this.pushedVars.push({key: key, value: this.vars[key]});
	if (key) this.vars[key] = value;
};
XPath.Environment.prototype.popVar = function() {
	var entry = this.pushedVars.pop();
	if (typeof entry.value == 'undefined') delete this.vars[entry.key]; else this.vars[entry.key] = entry.value;
};

XPath.parse = function(s) {
	if (!('cache' in XPath.parse)) XPath.parse.cache = {};
	var expr = XPath.parse.cache[s];
	if (expr) return expr;
	
	var r = Parsing.eval(XPath.Grammar.Expr, " " + s);
	if (!r) {
		console.error("Failed to parse XPath expression: " + s);
		return;
	}
	var tail = r[1];
	for (var i = 0; i < tail.length; i++) {
		if (" \n\t".indexOf(tail.charAt(i)) == -1) {
			console.error("Failed to parse XPath expression: " + s);
			return;
		}
	}
	XPath.parse.cache[s] = r[0];
	r[0].queryText = s;
	return r[0];
};

XPath.analyze = function(xpath, env) {
	var expr = (typeof xpath == 'string' || xpath instanceof String) ? XPath.parse(xpath) : xpath;
	var analysis = {bounded: true, referencedVars: [], referencedNodeNames: [], env: env};
	xpath.analyze(analysis);
	return analysis;
};

lz.node.prototype.query = function(xpath, env) {
	var t1 = new Date().getTime();
	if (!env) env = new XPath.Environment();
	env.setup();
	var t2 = new Date().getTime();
	if (typeof xpath == 'string' || xpath instanceof String) {
		var expr =  XPath.parse(xpath);
	} else {
		var expr = xpath;
		xpath = xpath.queryText;
	}
	var t3 = new Date().getTime();
	if (expr) {
		var context = {item: this, position: 1, size: 1, env: env};
		var result = expr.eval(context);
	}
	var t4 = new Date().getTime();
	env.teardown();
	var t5 = new Date().getTime();
	var len = result ? result.length : 0;
	var vars = [];
	for (var v in env.vars) {
		vars.push(v + ' = ' + env.vars[v]);
	}
	// console.log((t5 - t1) + "ms (" + (t3-t2) + "ms parse, " + (t4-t3) + "ms eval), " + len + " result".pluralize(len) + ", for query " + xpath + (vars.length ? ' {' + vars.join(', ') + '}' : ''));
	return result;
};

Array.prototype.query = function(xpath, env) {
	if (this.length == 0) return null;
	if (this.length == 1) return this[0].query(xpath, env);
	console.error("multi-context queries not supported yet");
	return;
	
	var t1 = new Date().getTime();
	if (!env) env = new XPath.Environment();
	env.setup();
	var t2 = new Date().getTime();
	var result = [];
	var expr = XPath.parse(xpath);
	var t3 = new Date().getTime();
	if (expr) {
		for (var i = 0; i < this.length; i++) {
			var context = {item: this[i], position: 1, size: 1, env: env};
			result.append(expr.eval(context));
		}
		// TODO: merge results?
	}
	var t4 = new Date().getTime();
	env.teardown();
	var t5 = new Date().getTime();
	console.log((t5 - t1) + "ms for query " + xpath + " (" + (t3-t2) + "ms parse, " + (t4-t3) + "ms eval)");
	return result;
}

Array.prototype.append = function(a) {
	this.push.apply(this, a);
	return this;
};

Array.prototype.concatMap = function(fn, thisObject) {
	var result = [], len = this.length;
	for (var i = 0; i < len; i++) {
		if (typeof this[i] != 'undefined') result.append(fn.call(thisObject, this[i], i, this));
	}
	return result;
};

]]></script>

<script src="nodes.js"/>
<script src="utils.js"/>
<script src="semantics.js"/>
<script src="semantics-paths.js"/>
<script src="parsing.js"/>
<script src="grammar.js"/>
<script src="functions.js"/>

</library>
