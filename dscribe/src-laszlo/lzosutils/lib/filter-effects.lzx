<library>
  <class name="FilterEffect" extends="node">
    <attribute name="visible" value="true"/>
    <attribute name="applied" value="false"/>
    <attribute name="filterName" type="string"/>
    <attribute name="properties" value="{}"/>
    <handler name="onvisible">
      if (applied == visible) return;
      var mc = parent.getMCRef();
      if (!mc || !mc['filters']) return;
      this.applied = visible;
      var filter = this['filter'] = this['filter'] || createFilter();
      var filters = mc.filters; //Array.without(mc.filters, filter);
      if (apply)
        filters = filters.concat([filter]);
      else
        filters = [];
      mc.filters = filters;
    </handler>
    <method name="createFilter">
      var filter = new flash.filters[filterName+'Filter']();
      for (var name in properties)
        filter[name] = properties[name];
      return filter;
    </method>
  </class>

  <class name="DropShadowFilterEffect" extends="FilterEffect">
    <method name="createFilter">
      var filter = new flash.filters.DropShadowFilter();
      filter.alpha = 0.6;
      return filter;
    </method>
  </class>

  <class name="GlowFilterEffect" extends="FilterEffect">
    <attribute name="color" type="color" value="0xffff00"/>
    <attribute name="blur" value="30"/>
    <method name="createFilter">
      var filter = new flash.filters.GlowFilter(this.color, 1);
      filter.blurX = filter.blurY = this.blur;
      return filter;
    </method>
  </class>

  <class name="GrayScaleEffect" extends="FilterEffect">
    <method name="createFilter">
      var offset = 127;
      var filter = new flash.filters.ColorMatrixFilter();
      filter.matrix = new Array(
      .16, .16, .16, 0, offset,
      .16, .16, .16, 0, offset,
      .16, .16, .16, 0, offset,
      0, 0, 0, 1, 0);
      return filter;
    </method>
  </class>
</library>