<library>

<include href="lzosutils/lib"/>
<include href="baseutils/lib"/>
<include href="diagram-editor.lzx"/>
<include href="magic-sentence.lzx"/>

<resource name = 'iconDelete' src = 'icons/delete_obj.gif'/>

<class name = 'uml_diagram' showhandcursor = 'false' width = '${immediateparent.width}' height = '${immediateparent.height}'>
	<attribute name = 'defaultplacement' value = 'contents' type = 'string'/>
	<attribute name = 'title' type = 'string'/>
	<attribute name = 'xml_id' type = 'string'/>
	
	<view name = 'contents' width = '${parent.width}' height = '${parent.height}'/>

	<handler name = 'onclick'> findAncestor("select").select(null); </handler>
	<method name = 'gatherPossibleActions' args = 'box, targets'>
		box.setTitle("Diagram");
		box.addLink({icon: 'iconDelete', text: "Do something", action: function() {dump(this);}});
	</method>
</class>

<class name = 'uml_class'
		onmousedown = 'dragger.apply()'
		onmouseup = 'dragger.remove()'>
	<attribute name = 'defaultplacement' value = 'contents' type = 'string'/>
	<attribute name = 'padding' value = '$style{"padding"}' type = 'size'/>
	<attribute name = 'color' value = '$style{"color"}' type = 'color'/>
	<attribute name = 'xml_id' type = 'string'/>
	<handler name = 'onclick'> findAncestor("select").select(this); </handler>

	<dragstate name = 'dragger'
		drag_min_x = '0'
		drag_max_x = '${immediateparent.mask.getAttributeRelative("width", immediateparent) - width}'
		drag_min_y = '0'
		drag_max_y = '${immediateparent.mask.getAttributeRelative("height", immediateparent) - height}'>
		<handler name = 'onapply'>
			if (!findAncestorProperty("editMode")) this.remove();
		</handler>
	</dragstate>
	
	<resizestatelimits name = 'resizer'
		minwidth = '50'
		maxwidth = '${immediateparent.mask.getAttributeRelative("width", immediateparent) - x}'
		minheight = '$once{19 + 2*padding}'
		maxheight = '${inside.contents.height + 2*(padding + 1)}'>
		<handler name = 'onapply'>
			if (!findAncestorProperty("editMode")) this.remove();
		</handler>
	</resizestatelimits>
	
	<rect width = '${parent.width}' height = '${parent.height}'
		fillAlpha = '0.7' fillColor = 'white'
		strokeAlpha = '1.0' strokeColor = '${parent.color}'/>
    
	<view name = 'inside' x = '1' y = '1' width = '${parent.width-2}' height = '${parent.height-2}' clip = 'true'>
		<vbox name = 'contents'
			x = '${classroot.padding}' y = '${classroot.padding}'
			width = '${parent.width - 2*classroot.padding}'/>
		<faderect visible = '${parent.contents.height + 2*classroot.padding > parent.height}'
			target = '$once{parent.contents}'
			side = 'bottom'/>
	</view>

	<sizecorner resizer = '$once{parent.resizer}' visible = '${findAncestor("editMode").editMode}'/>
	
	<method name = 'init'><![CDATA[
		super.init();
		var minheight = 19 + 2*padding;
		var fullheight = inside.contents.height + 2*(padding + 1);
		if (height < minheight) setAttribute("height", fullheight);
    ]]></method>
</class>

<class name = 'uml_blockname'>
	<attribute name = 'text' type = 'text'/>
	<attribute name = 'xml_id' type = 'string'/>
	<rollovertext name = 'contents'
		x = '${Math.max(0, (classroot.immediateparent.width - width)/2)}'
		y = '1'
		fontsize = '12'
		text = '${parent.text}'
		overflow = '${classroot.immediateparent.width &lt; width}'/>
	<faderect visible = '${parent.contents.x == 0}'
		target = '$once{parent.contents}'
		side = 'right'/>
</class>

<class name = 'uml_compartment'>
	<attribute name = 'kind' type = 'string'/>
	<attribute name = 'defaultplacement' value = 'contents' type = 'string'/>
	<attribute name = 'xml_id' type = 'string'/>
	<hrule name = 'separator'/>
	<vbox name = 'contents' y = '${parent.separator.height}' width = '${classroot.immediateparent.width}'/>
	<faderect target = '$once{parent.contents}' side = 'right'/>
</class>

<class name = 'uml_member'
		width = '${immediateparent.width}' clip = 'true' opacity = '0.5'>
	<attribute name = 'defaultplacement' value = 'contents' type = 'string'/>
	<attribute name = 'xml_id' type = 'string'/>
	<attribute name = 'varnames_visibility' value = 'show' type = 'string'/>
	<attribute name = 'vartypes_visibility' value = 'show' type = 'string'/>
	
	<method name = 'findSetHeightContainer'><![CDATA[
		return parent.findFormalAncestorSuchThat(function() {
				return this.hassetheight && !(this instanceof uml_diagram);});
	]]></method>
	
	<method name = 'animateShow'>
		setHeight(0);
		show();
		animate("height", measureHeight(), 150, false, {motion: "linear"});
		var container = findSetHeightContainer();
		if (container) container.animate("height", measureHeight(), 150, true, {motion: "linear"});
	</method>
	<method name = 'animateHide'>
		findAncestor("deselect").deselect(this);
		var animator = animate("height", 0, 150, false, {motion: "linear"});
		new LzDelegate({execute: function(_) {hide();}}, "execute", animator, "onstop");
		var container = findSetHeightContainer();
		if (container) container.animate("height", -height, 150, true, {motion: "linear"});
	</method>
	
	<method name = 'refresh' args = 'unused'>
		displayText.setAttribute('text', computeText());
	</method>

	<method name = 'renderVar' args = 'v'><![CDATA[
		if (!(v instanceof lz.uml_var)) return 'expected a uml:var: ' + v;
		if (!(v.subnodes && v.subnodes.length)) return '';
		var vname = v.subnodes[0];
		if (!(vname instanceof lz.uml_name)) return 'uml:var has first child other than uml:name: ' + vname;
		var vtype = v.subnodes.length > 1 ? v.subnodes[1] : null;
		if (vtype && !(vtype instanceof lz.uml_type)) return 'uml:var has second child other than uml:type: ' + vtype;
		var s = '';
		if (varnames_visibility == 'show') s += vname.text;
		if (vtype && varnames_visibility == 'show' && vartypes_visibility == 'show') s += ' : ';
		if (vtype && vartypes_visibility == 'show') s += vtype.text;
		return s;
	]]></method>
	
	<handler name = 'onmousedown'> callAncestorProperty("dragger", function() {this.apply()}); </handler>
	<handler name = 'onmouseup'> callAncestorProperty("dragger", function() {this.remove()}); </handler>
	<handler name = 'onclick'> findAncestor("select").select(this); </handler>
	<handler name = 'onwidth'>
		displayText.setAttribute("overflow", displayText.width > width);
	</handler>
	<handler name = 'oninit' method = 'refresh'/>

	<node name = 'contents'/>
	<rollovertext name = 'displayText' opacity = '${classroot.opacity}'>
		<handler name = 'ontext'>
			setAttribute("overflow", width > parent.width);
		</handler>
	</rollovertext>
</class>
 
<class name = 'uml_attribute' extends = 'uml_member'>
	<method name = 'computeText'><![CDATA[
		if (varnames_visibility == 'hide' && vartypes_visibility == 'hide') return '';
		if (!(contents.subnodes && contents.subnodes.length)) return '';
		return renderVar(contents.subnodes[0]);
	]]></method>
	
	<method name = 'gatherPossibleActions' args = 'actionBox, targets'>
		if (targets.length != 1) return;
		var target = targets[0];
		actionBox.setTitle("Attribute");
		actionBox.addLink({icon: "iconDelete", text: "Delete", actionCreator: function() {
			var action = new MagicSentenceAction();
			action.addChoice(
					"targetSelector",
					"attribute " + target.name, "/id('$1')".fill(target.xml_id),
					"attributes named " + target.name, "//uml:attribute[name='$1']".fill(target.name),
					"all attributes of type " + target.type, "//uml:attribute[type='$1']".fill(target.type));
			action.addChoice(
					"location",
					"class " + target.uml_class.name, "[ancestor::uml:class/name='$1']".fill(target.uml_class.name),
					"all classes", "");
			action.addChoice(
					"scope",
					"this diagram", "/id('$1')".fill(target.uml_class.diagram.xml_id),
					"all diagrams", "");
			action.addSentence({targetSelector: 0}, "Delete ${targetSelector} in ${scope}.");
			action.addSentence({}, "Delete ${targetSelector} from ${location} in ${scope}.");
			action.apply = function() {animateHide();};
			action.unapply = function() {animateShow();};
			return action;
		}});
	</method>
</class>

<class name = 'uml_operation' extends = 'uml_member'>
	<attribute name = 'args_visibility' value = 'show' type = 'string'/>
	<attribute name = 'return_type_visibility' value = 'show' type = 'string'/>

	<method name = 'computeText'><![CDATA[
		if (!(contents.subnodes && contents.subnodes.length)) return '';
		var oname = contents.subnodes[0];
		if (!(oname instanceof lz.uml_name)) return 'expected uml:name: ' + oname;
		var oargs = contents.subnodes.length >= 2 ? contents.subnodes[1] : null;
		if (oargs && !(oargs instanceof lz.uml_args)) return 'expected uml:args: ' + oargs;
		var ortype = contents.subnodes.length >= 3 ? contents.subnodes[2] : null;
		if (ortype && (!ortype instanceof uml_type)) return 'expected uml:type: ' + ortype;
		var s = oname.text + '(';
		if (args_visibility == 'elide') {
			s += '...';
		} else if (oargs && args_visibility == 'show') {
			s += oargs.subnodes.map(function(arg) {return renderVar(arg);}).join(', ');
		}
		s += ')';
		if (ortype && return_type_visibility == 'show') {
			s += ' : ' + ortype.text;
		}
		return s;
	]]></method>
</class>

<class name = 'textnode' extends = 'node'>
	<attribute name = 'text' value = '' type = 'text'/>
</class>

<class name = 'uml_var' extends = 'textnode'/>
<class name = 'uml_name' extends = 'textnode'/>
<class name = 'uml_type' extends = 'textnode'/>
<class name = 'uml_args' extends = 'textnode'/>

</library>
