<library>

<include href="lzosutils/lib"/>

<script><![CDATA[

MagicSentenceAction = function() {
	this.choices = {};
	this.sentences = [];
	this.selections = {};
};

MagicSentenceAction.prototype.addChoice = function() {
	if (arguments.length < 3 || arguments.length % 2 != 1) throw new Error("bad number of arguments " + arguments.length);
	if (arguments[0] in choices) throw new Error(arguments[0] + " already listed in choices map");
	var options = [];
	for (var i = 1; i < arguments.length; i += 2) {
		options.push({text: arguments[i], value: arguments[i+1]});
	}
	this.choices[arguments[0]] = options;
	this.selections[arguments[0]] = 0;
};

MagicSentenceAction.prototype.addSentence = function(pattern, text) {
	this.sentences.push({pattern: pattern, text: text});
};

MagicSentenceAction.prototype.get = function(choiceName) {
	return this.choices[choiceName][this.selections[choiceName]].value;
};

MagicSentenceAction.prototype.roll = function(choiceName) {
	this.selections[choiceName] = (this.selections[choiceName] + 1) % this.choices[choiceName].length;
}

MagicSentenceAction.prototype.getCurrentSentenceTemplate = function() {
	for (var i = 0; i < this.sentences.length; i++) {
		var sentence = this.sentences[i];
		var match = true;
		for (var key in sentence.pattern) {
			if (this.selections[key] != sentence.pattern[key]) {
				match = false;
				break;
			}
		}
		if (match) return sentence.text;
	}
	return "No sentence matched selections " + this.selections;
};

MagicSentenceAction.prototype.getCurrentSentence = function(dispatchIndex) {
	var template = this.getCurrentSentenceTemplate();
	for (var key in this.choices) {
		template = template.replace(
				"${" + key + "}",
				"<a href='asfunction:_root.TextClickDispatcher.dispatchClick," + dispatchIndex + ":" + key +"'>" +
						this.choices[key][this.selections[key]].text + "</a>");
	}
	return template;
};

MagicSentenceAction.prototype.createView = function(parent) {
	return new lz.MagicSentenceView(parent, {action: this});
};


TextClickDispatcher = {};

TextClickDispatcher.dispatchTable = [];

TextClickDispatcher.register = function(view) {
	TextClickDispatcher.dispatchTable.push(view);
	return TextClickDispatcher.dispatchTable.length - 1;
};

TextClickDispatcher.unregister = function(index) {
	TextClickDispatcher.dispatchTable.splice(index, 1);
}

TextClickDispatcher.dispatchClick = function(cookie) {
	var k = cookie.indexOf(":");
	TextClickDispatcher.dispatchTable[parseInt(cookie.substring(0, k))].clicked(cookie.substring(k+1));
};


]]></script>

<class name = 'MagicSentenceView' width = '${immediateparent.width}' height = '${sentence.height}'>
	<attribute name = 'action' type = 'expression'/>
	<attribute name = 'dispatchIndex' type = 'number'/>
	<text name = 'sentence' width = '${parent.width}' multiline='true' resize='false'/>
	<handler name = 'oninit'>
		var styleSheet = new TextField.StyleSheet();
		styleSheet.setStyle("a:link", {color:"#0000FF"});
		styleSheet.setStyle("a:hover", {color:"#FF0000"});
		sentence.sprite.__LZtextclip.styleSheet = styleSheet;
		this.dispatchIndex = TextClickDispatcher.register(this);
		buildSentence();
	</handler>
	<method name = 'buildSentence'>
		sentence.setText(action.getCurrentSentence(dispatchIndex));
	</method>
	<method name = 'clicked' args = 'choiceName'>
		action.roll(choiceName);
		buildSentence();
	</method>
	<method name = 'destroy' args = '_'>
		TextClickDispatcher.unregister(dispatchIndex);
		super.destroy();
	</method>
</class>

</library>
