function scope($action):
	if ($action/@scope='diagram') then /id($action/@diagram) else /


function specificity($action):
	(if ($action/@targetSelector = 'by-id') then 2
		else if ($action/@location != 'any') then 0) +
	(if ($action/@scope = 'diagram') then 1 else 0)

function actionProperties($action):
	(
		attribute action {$action/@xml:id},
		attribute specificity {specificity($action)},
		attribute serial {$action/@serial},
		if ($action/@override) then attribute override {} else ()
	)


to deconflict candidate actions
	for each target: /a:triggers
	for all $candidates: /a:candidates
	with some $c0: $candidates/a:*
	with distinct $key: $c0/@key
	with some $c1: $c0[@key = $key]
	with some $minserial: max((0, $c1[@override]/@serial))
	with some $c2: $c1[@serial >= $minserial]
	with some $minspecificity: max((0, $c2/@specificity))
	with some $c3: $c2[@specificity >= $minspecificity]
	with some $highserial: max($c3/@serial)
	insert: $c3[@serial = $highserial]

to derive keys for set attribute actions
	for each $action: /a:candidates/a:set-attribute
	set: attribute key {concat($action/name(), "-", $action/@target, "-", $action/@attr)}

to apply set-attribute actions
	for each $action: /a:triggers/a:set-attribute
	for each target: /id($action/@target)
	insert: element attr:override {attribute {$action/@attr} {$action/@value}}


------ Delete Attribute

<action:delete-attribute xml:id='act01' serial='123'
	targetSelector='by-id' location='any' scope='diagram'
	selection='att01' diagram='diag01' origin='field01' name='foo' type='bar' className='baz'/>

<action:delete-attribute xml:id='act01' serial='124'
	targetSelector='by-name' location='any' scope='all'
	selection='att01' diagram='diag01' name='foo' type='bar' className='baz'/>

to apply delete-attribute actions
	for each target:	/a:candidates
	for each $action:	/a:triggers/a:delete-attribute
	for each $attribute:
		scope($action)/
		(if ($action/@targetSelector='by-id') then id($action/@selection)
			else if ($action/$targetSelector='by-origin') then descendant::uml:attribute[depicts=$action/@origin]
			else if ($action/$targetSelector='by-name') then descendant::uml:attribute[name=$action/@name]
			else if ($action/$targetSelector='by-type') then descendant::uml:attribute[type=$action/@type]
			else ())/ 
		(if ($action/@location='in-class-name') then .[ancestor::uml:class/name=$action/@className] else .)
	insert:
		element a:set-attribute {
			attribute target {$attribute/@xml:id},
			attribute attr {'visible'},
			attribute value {'false'},
			actionProperties($action)
		}


------ Convert Accessors to Attributes

<action:convert-accessors-to-attributes xml:id='act01' serial='125'
	targetSelector='by-id' nameRestriction='any' typeRestriction='any' classRestriction='any' scope='all'
	getter='op01' setter='op02' diagram='diag01'
	readAccess='public' writeAccess='public' getPrefix='get' setPrefix='set'
	name='foo' type='bar' className='baz'/>

to apply convert-accessors-to-attributes
	for each $action: /a:triggers/a:convert-accessors-to-attributes[@targetSelector='by-id']
	for each target: /a:candidates
	insert:
		element a:convert-accessors-to-attributes-helper {
			attribute getter {$action/@getter},
			attribute setter {$action/@setter},
			actionProperties($action)
		}

to derive keys for convert-accessors-to-attributes-helper actions
	for each $action: /a:candidates/a:convert-accessors-to-attributes-helper
	for each target: $action
	set: attribute key {concat($action/name(), "-", $action/@getter, "-", $action/@setter)}

to apply convert-accessors-to-attributes-helper
	for each $action: /a:triggers/a:convert-accessors-to-attributes-helper
	

	<rule>
		for all $operations: /id('diag01')/id('att01 att02')
		for all targets: $operations
		insert: <q:set-visibility value='false' serial='123' specificity='2' action='act01'/>
		for all targets: $operations/ancestor::uml:class/uml::compartment[@kind='attributes']
		insert: <uml:attribute>...</uml:attribute>
	</rule>
</action:convert-accessors-to-attributes>

<action:convert-accessors-to-attributes >
	<rule>
		for each $getter: //uml:operation[starts-with(uml:name, 'get')]
		with some $name: substring-after($getter/uml:name, 'get')
		with some $type: $getter/uml:type/text()
		if: substring($name, 1, 1) eq upper-case(substring($name, 1, 1))
		for all $setter: $getter/../uml:operation[uml:name = concat('set', $name) and uml:args/uml:var[1]/uml:type = $type]
		with some $lcname: concat(lower-case(substring($name, 1, 1)), substring($name, 2))
		with some $operations: $getter union $setter
		for all targets: $operations
		insert: <q:set-visibility value='false' serial='123' specificity='0' action='act01'/>
		for all targets: $operations/ancestor::uml:class/uml::compartment[@kind='attributes']
		insert:
			<q:insert-derived-attribute serial='123' specificity='0' ops='{string-join($operations/@xml:id, " ")}' action='act01'/>
			<uml:attribute><uml:var>
				<uml:name>{$lcname}</uml:name><uml:type>{$type}</uml:type>
			</uml:var></uml:attribute>

collapse derived attributes
	for each $e: //uml:class[q:insert-derived-attribute]
	for each $ops-ids: distinct-values($e/q:insert-derived-attribute/@ops)
	with some $quantum:
		$e/q:insert-derived-attribute
			[@ops=$ops-ids]
			[@serial >= max((.[@override]/@serial, 0))]
			[@specificity = max(@specificity)]
			[@serial = max(@serial)]
	with some $operations: /id($ops-ids)
	with some $name: extract-attribute-name($operations/um:name/text())
	with some $type: extract-attribute-type($operations/um:name/text())
	for all targets: $e/uml:compartment[@kind='attributes']
	insert:
		<uml:attribute><uml:var>
			<uml:name>{$lcname}</uml:name><uml:type>{$type}</uml:type>
		</uml:var></uml:attribute>
	for each target: $operations
	insert: <q:set-visibility value='false' serial='{


